AWSTemplateFormatVersion: '2010-09-09'

Description: Stage-level infrastructure for the RandomLunch API

Parameters:
  StageName:
    Type: String
    Description: Name of the stage the infrastructure belongs to
  DomainName:
    Type: String
    Description: Domain name of the website
  ApplicationName:
      Type: "String"
      Description: "Name of the application"
      #TODO: add validation. ( lowercase alphabets only )
  AccountName:
    Type: String
    Description: Name of the AWS account hosting the infrastructure

Conditions:
  IsProduction: !Equals [ !Ref StageName, prod ]
  IsCustomStage:
    Fn::And:
      - !Not [ !Condition IsProduction ]
      - !Not [ !Equals [ !Ref StageName, dev ] ]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: basic_access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: '*'
        - PolicyName: ssm_config_access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/randomlunch-api/${StageName}/*'
        - PolicyName: database_access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                Resource: !GetAtt PlacesTable.Arn
  APICustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName:
        Fn::If:
          - IsProduction
          - !Sub api.${DomainName}
          - Fn::If:
            - IsCustomStage
            - !Sub api-${StageName}.dev.${DomainName}
            - !Sub api.dev.${DomainName}
      CertificateArn:
        Fn::If:
          - IsProduction
          - Fn::ImportValue:
              !Sub "${ApplicationName}-${StageName}-CertificateArnProdWildcard"
          - Fn::ImportValue:
              !Sub "${ApplicationName}-${StageName}-CertificateArnDevWildcard"
  DNSCustomDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt APICustomDomain.DistributionDomainName
        HostedZoneId: 'Z2FDTNDATAQYW2'
      Name: !Ref APICustomDomain
      Type: A
      HostedZoneName: !If [ IsProduction, !Sub '${DomainName}.', !Sub 'dev.${DomainName}.' ]
  PlacesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${StageName}.Places'
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: !If [ IsProduction, 5, 1 ]
        WriteCapacityUnits: 1

Outputs:
  LambdaExecutionRoleArn:
    Description: ARN of the IAM role assumed by the Lambda function
    Value: !GetAtt 'LambdaExecutionRole.Arn'
  CustomDomainName:
    Description: Custom domain name for the API Gateway stage
    Value: !Ref APICustomDomain
